@page "/musclegroups"

@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Muscle Groups</PageTitle>

<h3>MuscleGroups</h3>

<div class="grid">
    <QuickGrid Items="@FilteredItems" Pagination="@_pagination">
        <PropertyColumn Property="@(mg => mg.Name)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="_nameFilter" 
                           @bind:event="oninput" placeholder="Muscle group name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(mg => mg.Parent != null ? mg.Parent.Name : string.Empty)"
                        Title="Parent" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="_parentFilter" 
                           @bind:event="oninput" placeholder="Parent name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
    </QuickGrid>
</div>
<Paginator Value="@_pagination" />


@code {
    IQueryable<MuscleGroup> _items = null!;
    readonly PaginationState _pagination = new() { ItemsPerPage = 10 };
    
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    string? _nameFilter = null;
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    string? _parentFilter = null;
    
    protected override void OnInitialized() {
        _items = GetItems().AsQueryable();
    }
    
    IQueryable<MuscleGroup> FilteredItems {
        get {
            var result = _items;
            
            if (!string.IsNullOrEmpty(_nameFilter)) {
                result = result.Where(muscleGroup => 
                    muscleGroup.Name.Contains(_nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            
            if (!string.IsNullOrEmpty(_parentFilter)) {
                result = result.Where(mg => MuscleGroupMatches(mg.Parent));
            }

            return result;
        }
    }
    
    bool MuscleGroupMatches(MuscleGroup? mg) {
        if (mg is null) return false;
        
        if (mg.Name.Contains(_parentFilter!, StringComparison.CurrentCultureIgnoreCase)) {
            return true;
        }
        
        return mg.Parent is not null && MuscleGroupMatches(mg.Parent);
    }

    MuscleGroup[] GetItems() => _source;
    static MuscleGroup all = new("All");
    static MuscleGroup arms = new("Arms", all);
    readonly MuscleGroup[] _source = {
        all,
        arms,
        new ("Biceps", arms),
        new ("Chest", all),
        new ("Back", all),
        new ("Triceps", arms),
        new ("a", all),
        new ("b", all),
        new ("c", all),
        new ("d", all),
        new ("e", all),
        new ("f"),
        new ("g"),
        new ("h"),
        new ("i"),
        new ("j"),
        new ("k"),
        new ("l"),
    };
}