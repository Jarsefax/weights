@page "/exercises"

@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Exercises</PageTitle>

<h1>Exercises</h1>

<div class="grid">
    <QuickGrid Items="@FilteredExercises"  Pagination="@pagination">
        <PropertyColumn Property="@(e => e.Name)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameFilter" 
                           @bind:event="oninput" placeholder="Exercise name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="Muscle Group" Property="@(e => e.MuscleGroup.Name)" Sortable="true" />
    </QuickGrid>
</div>
<Paginator State="@pagination" />


@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    string nameFilter;
    IQueryable<Exercise>? itemsQueryable;
    
    IQueryable<Exercise> FilteredExercises
    {
        get
        {
            var result = itemsQueryable;
            
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result?.Where(c => 
                    c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        itemsQueryable = exercises.AsQueryable();
    }
    
    IEnumerable<Exercise> exercises = new[] {
        new Exercise("Curl", new MuscleGroup("Biceps", new MuscleGroup("Arms"))),
        new Exercise("Bench", new MuscleGroup("Chest")),
        new Exercise("Row", new MuscleGroup("Back")),
        new Exercise("Close Grip Bench Press", new MuscleGroup("Triceps", new MuscleGroup("Arms")))
    };
}