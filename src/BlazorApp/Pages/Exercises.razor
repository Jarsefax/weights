@page "/exercises"

@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Exercises</PageTitle>

<h1>Exercises</h1>

<div class="grid">
    <QuickGrid Items="@FilteredItems"  Pagination="@_pagination">
        <PropertyColumn Property="@(e => e.Name)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="_nameFilter" 
                           @bind:event="oninput" placeholder="Exercise name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="Muscle Group" Property="@(e => e.MuscleGroup.Name)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="_muscleGroupFilter" 
                           @bind:event="oninput" placeholder="Muscle group name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
    </QuickGrid>
</div>
<Paginator Value="@_pagination" />

@code {
    IQueryable<Exercise>? _items = null!;
    readonly PaginationState _pagination = new() { ItemsPerPage = 10 };
    
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    string? _nameFilter = null;
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    string? _muscleGroupFilter = null;
    
    protected override void OnInitialized() {
        _items = GetItems().AsQueryable();
    }
    
    IQueryable<Exercise> FilteredItems {
        get {
            IQueryable<Exercise> result = _items!;
            
            if (!string.IsNullOrEmpty(_nameFilter)) {
                result = result.Where(exercise => 
                    exercise.Name.Contains(_nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            
            if (!string.IsNullOrEmpty(_muscleGroupFilter)) {
                result = result.Where(exercise => MuscleGroupMatches(exercise.MuscleGroup));
            }
            
            return result;
        }
    }

    bool MuscleGroupMatches(MuscleGroup? mg)
    {
        if (mg is null) return false;
        
        if (mg.Name.Contains(_muscleGroupFilter!, StringComparison.CurrentCultureIgnoreCase)) {
            return true;
        }
        
        return mg.Parent is not null && MuscleGroupMatches(mg.Parent);
    }
    
    Exercise[] GetItems() => _source;
    readonly Exercise[] _source = {
        new ("Curl", new MuscleGroup("Biceps", new MuscleGroup("Arms"))),
        new ("Bench", new MuscleGroup("Chest")),
        new ("Row", new MuscleGroup("Back")),
        new ("Close Grip Bench Press", new MuscleGroup("Triceps", new MuscleGroup("Arms")))
    };
}